name: Backend CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'

jobs:
  lint-and-format:
    name: Lint & Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint || echo "ESLint not configured"

      - name: Check code formatting
        run: npm run format:check || echo "Prettier not configured"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for vulnerabilities (dry run)
        run: npm audit fix --dry-run

  test:
    name: Tests & Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: stockit_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: stockit_test
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment variables
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_USERNAME=stockit_test" >> $GITHUB_ENV
          echo "DB_PASSWORD=test_password" >> $GITHUB_ENV
          echo "DB_DATABASE=stockit_test" >> $GITHUB_ENV
          echo "JWT_SECRET=test_jwt_secret_key_for_ci_testing_purposes" >> $GITHUB_ENV

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run database migrations
        run: npm run migrate 

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false       

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          file: ./coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Build TypeScript
        run: npm run build

      - name: Verify build artifacts
        run: |
          if [ -d "dist" ]; then
            echo "✅ Build successful - dist folder created"
            ls -la dist/
          else
            echo "❌ Build failed - no dist folder found"
            exit 1
          fi

  docker-build:
    name: Docker Build & Test
    needs: [test, security-audit]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Dockerfile if not exists
        run: |
          if [ ! -f "Dockerfile" ]; then
            cat > Dockerfile << 'EOF'
          FROM node:20-alpine
          
          WORKDIR /app
          
          # Copy package files
          COPY package*.json ./
          
          # Install dependencies
          RUN npm ci --only=production
          
          # Copy source code
          COPY . .
          
          # Build application
          RUN npm run build
          
          # Expose port
          EXPOSE 3001
          
          # Start application
          CMD ["npm", "start"]
          EOF
          fi

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: stockit-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --name stockit-test -d -p 3001:3001 \
            -e NODE_ENV=production \
            -e JWT_SECRET=test_secret \
            stockit-backend:test
          
          # Wait for container to start
          sleep 10
          
          # Test if container is running
          if docker ps | grep stockit-test; then
            echo "✅ Container started successfully"
          else
            echo "❌ Container failed to start"
            docker logs stockit-test
            exit 1
          fi
          
          # Cleanup
          docker stop stockit-test
          docker rm stockit-test

  deploy-staging:
    name: Deploy to Staging
    needs: [test, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://api-staging.stock-it.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --only=production

      - name: Build for staging
        run: npm run build

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r dist node_modules package.json deploy/
          tar -czf backend-staging.tar.gz -C deploy .

      - name: Upload staging artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-staging
          path: backend-staging.tar.gz
          retention-days: 7

      - name: Deploy to staging server
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "This would deploy to your staging server"
          # Remplacer par vos commandes de déploiement réelles :
          # - scp/rsync vers serveur staging
          # - Docker deploy
          # - AWS/Azure/GCP deployment
          # - PM2 restart
          
      - name: Run smoke tests on staging
        run: |
          echo "🧪 Running smoke tests on staging..."
          # Remplacer par vos tests de fumée :
          # curl -f https://api-staging.stock-it.com/api/health
          # npm run test:smoke

  deploy-production:
    name: Deploy to Production
    needs: [test, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://api.stock-it.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --only=production

      - name: Build for production
        run: npm run build

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r dist node_modules package.json deploy/
          tar -czf backend-production.tar.gz -C deploy .

      - name: Upload production artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-production
          path: backend-production.tar.gz
          retention-days: 30

      - name: Deploy to production server
        run: |
          echo "🚀 Deploying to production environment..."
          echo "This would deploy to your production server"
          # Remplacer par vos commandes de déploiement réelles

      - name: Run health checks
        run: |
          echo "🏥 Running health checks on production..."
          # Remplacer par vos vérifications de santé

  docker-publish:
    name: Publish Docker Image
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/stockit-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

